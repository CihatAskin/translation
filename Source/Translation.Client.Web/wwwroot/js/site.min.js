function getPathFromUrl(url) { return url.split("?")[0]; }
function clearChildren(element) { while (element.firstChild) { element.removeChild(element.firstChild); } }
function createElement(tag) { return document.createElement(tag); }
function getElement(id) { return document.getElementById(id); }
function getValue(id) { return document.getElementById(id).value; }
function getAntiForgeryTokenFromLayout() { return document.getElementsByName('__RequestVerificationToken')[0].value; }

function getLowerCase(text) {
    return text.toLowerCase().replace(/ğ/gim, "g").replace(/ü/gim, "u").replace(/ş/gim, "s").replace(/ö/gim, "o").replace(/ç/gim, "c").replace(/ /gim, "_").replace(/-/gim, "_");
}

function createLink(text, href) {
    let a = createElement('a');
    a.innerText = text;
    a.href = href;
    return a;
}

function createButton(text, onClick) {
    let btn = createElement('button');
    btn.innerText = text;
    btn.onclick = onClick;
    return btn;
}

function hideElement(item) {
    item.style.opacity = 0;
    setTimeout(function () { item.style.display = 'none'; }, 377);
}

function showElement(item, opacity) {
    item.style.opacity = opacity;
    setTimeout(function () { item.style.display = 'block'; }, 89);
}

function doGet(url, onSuccess) {
    let req = new XMLHttpRequest();
    req.open('GET', url, true);
    req.onreadystatechange = function () {
        if (req.readyState === XMLHttpRequest.DONE) {
            if (199 < req.status && req.status < 300) {
                onSuccess(req);
            } else {
                if (req.status != 404) {
                    console.log('error', req.status.toString(), req);
                }
            }
        }
    }
    req.send(null);
}

function doPostWithJsonContent(url, data, onSuccess, onError) {
    doPostRequest(url, 'application/json', data, onSuccess, onError);
}

function doPostWithFormUrlEncodedContent(url, data, onSuccess, onError) {
    doPostRequest(url, 'application/x-www-form-urlencoded', data, onSuccess, onError);
}

function doPostRequest(url, contentType, data, onSuccess, onError) {
    let req = new XMLHttpRequest();
    req.open('POST', url, true);
    req.setRequestHeader('Content-type', contentType);
    req.setRequestHeader('RequestVerificationToken', getAntiForgeryTokenFromLayout());
    req.onreadystatechange = function () {
        if (req.readyState === XMLHttpRequest.DONE) {
            if (199 < req.status && req.status < 300) {
                onSuccess(req);
            } else {
                onError(req);
            }
        }
    };
    req.send(data);
}

function doIfConfirmed(btn, onConfirm) {
    showPopup(btn.dataset.confirmTitle, btn.dataset.confirmContent, true, onConfirm);
}

function doRedirectIfConfirmedSuccess(btn, redirectUrl) {
    showPopup(btn.dataset.confirmTitle, btn.dataset.confirmContent, true, function () {
        doPostWithFormUrlEncodedContent(btn.dataset.url, btn.dataset.prm,
            function (req) {
                let response = JSON.parse(req.response);
                if (response.isOk === true) {
                    window.location.href = redirectUrl;
                } else {
                    let messages = response.messages.join('<br/>');
                    showPopupMessage(messages);
                }
            },
            function (req) {
                let messages = JSON.parse(req.response).messages.join('<br/>');
                showPopupMessage(messages);
            });
    });
}

function translateScreen() {
    translateElement(document.head);
    translateElement(document.body);
}

function translateElement(element) {
    if (element === null
        || element === undefined) {
        return;
    }

    if (labels === null
        || labels === undefined) {
        return;
    }

    let defaultLang = 'en';
    if (currentUser !== undefined
        && currentUser !== null) {
        defaultLang = currentUser.language;
    }

    let placeholders = element.querySelectorAll('[placeholder]');
    placeholders.forEach(function (item) {
        for (let i = 0; i < labels.length; i++) {
            let label = labels[i];

            if (label.key === item.placeholder) {
                label.translations.forEach(function (translation) {
                    if (translation.languageIsoCode2 === defaultLang) {
                        item.setAttribute('placeholder', translation.translation);
                        return;
                    }
                });

                break;
            }
        }
    });

    let items = element.querySelectorAll('[data-translation]');
    items.forEach(function (item) {
        for (let i = 0; i < labels.length; i++) {
            let label = labels[i];
            if (label.key === item.dataset.translation) {
                label.translations.forEach(function (translation) {
                    if (translation.languageIsoCode2 === defaultLang) {
                        item.innerHTML = translation.translation;
                        return;
                    }
                });

                break;
            }
        }
    });
}

let currentUser = null;
doGet('/Data/GetCurrentUser', function (req) {

    if (199 < req.status && req.status < 300) {
        if (req.status === 200
            && req.responseText !== null) {
            localStorage.setItem('currentUser', req.responseText);
            currentUser = JSON.parse(localStorage.getItem('currentUser'));
        } else if (req.status === 200
            && req.responseText === null) {
            currentUser = null;
            window.redirect('/Login');
        }
    }
});

let labels = JSON.parse(localStorage.getItem('labels'));
if (labels === null) {
    doGet('/Data/GetMainLabels', function (req) {
        if (199 < req.status && req.status < 300) {        
            labels = localStorage.setItem('labels', req.responseText);         
            translateScreen();
        }
    });
} else {
    translateScreen();
}

let overlay = getElement('overlay');
let overlayMessage = getElement('overlayMessage');
let popup = getElement('popup');
let popupContent = getElement('popupContent');
let popupMessage = getElement('popupMessage');
let popupMessageContent = getElement('popupMessageContent');

function hidePopup() {
    popupContent.innerHTML = '';

    hideElement(popup);
    hideElement(overlay);
}

function hidePopupMessage() {
    popupMessageContent.innerHTML = '';

    hideElement(popupMessage);
    hideElement(overlayMessage);
}

function showPopup(title, content, isConfirm, onConfirm) {

    document.querySelector('#popup h1').innerHTML = title;
    popupContent.innerHTML = content;

    showElement(popup, 1);
    showElement(overlay, 0.8);

    if (isConfirm) {
        let btnOk = createButton('ok', onConfirm);
        btnOk.className = 'btnGreen';

        let btnCancel = createButton('cancel', hidePopup);
        btnCancel.className = 'btnRed';

        let divBtn = createElement('div');
        divBtn.style.marginTop = '13px';

        divBtn.appendChild(btnOk);
        divBtn.appendChild(btnCancel);
        popupContent.appendChild(divBtn);
    }
}

function showPopupMessage(message) {

    document.querySelector('#popupMessage h1').innerHTML = message;

    showElement(popupMessage, 1);
    showElement(overlayMessage, 0.8);

    let btnOk = createButton('ok', function () {
        hidePopupMessage();
        hidePopup();
    });
    btnOk.className = 'btnGreen';

    let divBtn = createElement('div');
    divBtn.style.marginTop = '13px';

    divBtn.appendChild(btnOk);
    popupMessageContent.appendChild(divBtn);
}
if (document.getElementById('overlay')) {
  var popupOverlay = document.getElementById('overlay');
  popupOverlay.onclick = function () {
    hidePopup();
  };
}
function getSelect(name) { return document.getElementById('select-' + name); }
function hasClass(element, className) { return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1; }
function trimSearchTerm(term, selectContent) {

    let items = selectContent.childNodes;
    for (var i = 0, l = items.length; i < l; i++) {
        if (items[i]
            && items[i].innerText) {
            if (items[i].innerText.toLowerCase() === term.trim().toLowerCase()) {
                return '';
            }
        }
    }

    return term.trim().toLowerCase().replace(/<br>/g, '').replace(/&nbsp;/g, '');
}

let theSelectChangeEvent = new Event('theSelectChange');
function onSelectChange(name, onChange) {
    var s = typeof name === 'string' ? getSelect(name) : name;
    s.addEventListener('theSelectChange', function (e) {
        if (typeof name === 'string') {
            if (name !== s.dataset.valueField) {
                return;
            }
        }

        onChange(s, s.dataset.value, s.dataset.text);
    });
}

let theSelectInitEvent = new Event('theSelectInit');
function onSelectInit(name, cb) {
    var s = typeof name === 'string' ? getSelect(name) : name;
    s.addEventListener('theSelectInit', function (e) {
        if (typeof name === 'string') {
            if (name !== s.dataset.valueField) {
                return;
            }
        }

        cb(s, s.dataset.value, s.dataset.text);
    });
}

let urlArray = [];
setInterval(function () { urlArray = []; }, 13000);

let theTrue = 'True';
let theValueSeparator = ',';
let refreshSelect = () => { };
let initSelects = () => { };
let initSingleSelect = () => { };
let resetSingleSelect = () => { };

function createSelectElement(name, url, typeClass, contentType, value, text, isSetFirstItem, parent) {
    let theSelect = document.createElement('div');
    theSelect.id = 'select-' + name;
    theSelect.name = 'select-' + name;
    theSelect.dataset.name = name;
    theSelect.dataset.valueField = name + 'Uid';
    theSelect.dataset.textField = name + 'Name';
    theSelect.dataset.value = value || '';
    theSelect.dataset.text = text || '';
    theSelect.dataset.url = url;
    theSelect.dataset.parent = parent || '';
    theSelect.dataset.setFirstItem = isSetFirstItem === true ? theTrue : false;
    theSelect.dataset.type = contentType === undefined ? 'text' : contentType;
    theSelect.classList.add('select');
    theSelect.classList.add(typeClass === undefined ? 'single-select' : typeClass);
    return theSelect;
}

(function () {
    let loadCount = 100;  // item count which load each time
    let oldSearchTerm = '';
    let isNotChanged = false;
    let allSelects = document.querySelectorAll('div.select');

    refreshSelect = function (s, cb) {
        if (s.dataset.value === ''
            && s.dataset.text === ''
            && s.dataset.setFirstItem === theTrue) {
            doGet(s.dataset.url + '?take=' + loadCount, function (req) {
                selectDataFiller(s, req);
                if (cb) cb();
            });
        } else {
            selectDataFiller(s);
            if (cb) cb();
        }
    };

    function selectDataFiller(s, req) {
        let json = [];
        if (req != undefined) { json = JSON.parse(req.responseText); }

        if (hasClass(s, 'single-select')) { initSingleSelect(s, json); }
        else if (hasClass(s, 'multiple-select')) { initMultipleSelect(s, json); }
    }

    function toggleSelectContent(selectButton) {
        let theSelect = selectButton.closest('.select');
        if (hasClass(theSelect, 'show')) {
            theSelect.classList.remove('show');
        } else if (!hasClass(theSelect, 'disabled')) {
            theSelect.classList.add('show');

            let parentValue = '';

            if (theSelect.dataset.parent !== ''
                && theSelect.dataset.parent !== undefined) {
                let parent = getSelect(theSelect.dataset.parent);

                if (parent != undefined
                    && parent.dataset.value != undefined) {
                    parentValue = parent.dataset.value;
                }
            }

            let lastUid = '';
            var itemCount = theSelect.lastElementChild.childElementCount;
            if (theSelect.lastElementChild.childNodes != undefined
                && theSelect.lastElementChild.childNodes[itemCount] != undefined
                && itemCount > 0) {
                lastUid = theSelect.lastElementChild.childNodes[itemCount].getAttribute('value');
            }

            let url = theSelect.dataset.url;
            if (url) {
                doGet(url + '?take=' + loadCount + '&parent=' + parentValue + '&lastUid=' + lastUid, function (req) {
                    let json = JSON.parse(req.responseText);
                    updateSelectContent(theSelect, json);
                });
            }
        }
    }

    function initSelectItems(selectContent, item, type, theSelect) {
        var texts = getElement(theSelect.dataset.textField).getAttribute('value');
        if (texts && texts.indexOf(item.text) >= 0) return null;

        let items = selectContent.childNodes;
        for (var i = 0, l = items.length; i < l; i++) {
            if (items[i].innerHTML === item.text) {
                return null;
            }
        }

        let selectItem = createElement('div');
        selectItem.className = "select-item";

        if (type === 'content') {
            selectItem.classList.add('content-item');
            let img = createElement('img');
            img.className = "select-item-image";
            img.setAttribute('src', item.image);
            let selectItemText = createElement('label');
            selectItemText.className = 'select-item-text';
            selectItemText.innerHTML = item.text;
            selectItem.appendChild(img);
            selectItem.appendChild(selectItemText);
        } else {
            selectItem.innerHTML = item.text;
        }

        selectItem.setAttribute('value', item.value);
        selectContent.appendChild(selectItem);
        return selectItem;
    }

    function reFillChildsData(value, parentName) {
        allSelects.forEach(function (s) {
            if (s.dataset.parent !== parentName) { return; }

            let url = s.dataset.url + '?take=' + loadCount + '&parent=' + value;
            if (!urlArray.includes(url)) {
                urlArray.push(url);
                doGet(url, function (req) {
                    s.innerHTML = '';
                    selectDataFiller(s, req);
                });
            }
        });
    }

    function addSelectContent(selectContent) {
        //visible height + pixel scrolled = total height 
        if (selectContent.offsetHeight + selectContent.scrollTop >= selectContent.scrollHeight) {
            let theSelect = selectContent.closest('.select');
            let parentId = theSelect.dataset.parent;
            let searchTerm = trimSearchTerm(theSelect.querySelector('.select-button-input').innerHTML, selectContent);

            let selectItems = selectContent.querySelectorAll('.select-item');
            let lastLength = selectItems.length;

            let selectUrl = theSelect.dataset.url;
            if (!selectUrl) return;

            let getUrl = selectUrl + '?q=' + searchTerm + '&take=' + loadCount;
            if (selectItems.length > 0) {

                let lastUid = selectItems[(lastLength - 1)].getAttribute('value');
                getUrl += '&lastUid=' + lastUid;
            }

            if (parentId) {
                let parent = getSelect(parentId);
                if (parent != undefined) {
                    getUrl += '&parent=' + parent.dataset.value;
                }
            }

            if (!urlArray.includes(getUrl)) {
                urlArray.push(getUrl);
                doGet(getUrl, function (req) {
                    let json = JSON.parse(req.responseText);
                    let type = theSelect.dataset.type;
                    for (let i = 0; i < json.length; i++) {
                        let selectItem = initSelectItems(selectContent, json[i], type, theSelect);
                        if (selectItem != null) {
                            selectItem.onclick = function () {
                                if (hasClass(theSelect, 'single-select')) { onClickSingleSelectItem(this); }
                                else { onClickMultipleSelectItem(this); }
                            }
                        }
                    }
                });
            }
        }
    }

    function updateSelectContent(theSelect, updateItem) {
        let selectContent = theSelect.querySelector('.select-content');

        if (updateItem.length === 0 && selectContent.childElementCount === 0) {
            selectContent.innerHTML = ' ';
            let noItem = createElement('div');
            noItem.style.padding = "5px";
            noItem.style.color = "grey";
            noItem.innerHTML = "no_item";
            noItem.dataset.translation = "no_item";
            selectContent.appendChild(noItem);
        }

        for (let i = 0; i < updateItem.length; i++) {
            let selectItem = initSelectItems(selectContent, updateItem[i], theSelect.dataset.type, theSelect);
            if (selectItem != null) {
                selectItem.onclick = function () {
                    if (hasClass(theSelect, 'single-select')) { onClickSingleSelectItem(this); }
                    else if (hasClass(theSelect, 'multiple-select')) { onClickMultipleSelectItem(this); }
                }
            }
        }
    }

    function searchSelectContent(selectInput, event) {
        let theSelect = selectInput.closest('.select');
        let selectButton = theSelect.querySelector('.select-button');
        let selectContent = theSelect.querySelector('.select-content');
        let parentId = theSelect.dataset.parent;
        let searchTerm = trimSearchTerm(selectInput.innerHTML, selectContent);

        // input empty and press backspace block request
        if (oldSearchTerm.length == 0 && event.keyCode == 8) {
            return;
        }
        // prevent request when pressed up arrow, down arrow, enter,
        if (event.keyCode == 38 ||
            event.keyCode == 40 ||
            event.keyCode == 13 ||
            searchTerm.length == 1) { return; }

        //prevent request when input value is not changed when press enter
        if (oldSearchTerm == selectInput.innerHTML) {
            isNotChanged = true;
            return;
        }
        oldSearchTerm = selectInput.innerHTML;
        isNotChanged = false;

        // delete existing loader
        if (theSelect.querySelector('.loader')) { theSelect.querySelector('.loader').remove(); }
        // create new loader
        let loader = createElement('div');
        loader.className = 'loader';
        loader.style.right = '-30px';
        selectButton.insertBefore(loader, selectButton.firstChild);

        let url = theSelect.dataset.url + '?q=' + searchTerm + '&take=' + loadCount;
        if (parentId) {
            let parent = getSelect('select-' + parentId);
            if (parent != undefined
                && parent.dataset.value != undefined) {
                url += '&parent=' + parent.dataset.value;
            }
        }
        // send request 
        if (!urlArray.includes(url)) {
            urlArray.push(url);
            doGet(url, function (req) {
                let updateItems = JSON.parse(req.responseText);
                if (theSelect.querySelector('.loader')) { theSelect.querySelector('.loader').remove(); }
                clearContent(theSelect);
                updateSelectContent(theSelect, updateItems);
            });
        }
    }

    // Single Select Functions
    resetSingleSelect = function (theSelect) {
        theSelect.dataset.value = '';
        theSelect.dataset.text = '';

        //clone select without children to empty inner html and remove any previous listeners
        let selectClone = theSelect.cloneNode(false);
        theSelect.parentNode.replaceChild(selectClone, theSelect);

        return selectClone;
    }

    initSingleSelect = function (theSelect, json) {
        if (theSelect.querySelector('div.select-button') == null) {
            initSingleSelectButton(theSelect, json);
            if (theSelect.dataset.detail === theTrue) {
                initSingleSelectInfo(theSelect, theSelect.dataset.detailUrl);
            }
            initSingleSelectContent(theSelect, json);
        }
    }

    function initSingleSelectButton(theSelect, json) {
        let selectButton = createElement('div');
        selectButton.className = "select-button";

        let uidInput = createElement('input');
        uidInput.setAttribute('type', 'hidden');
        uidInput.id = theSelect.dataset.valueField;
        uidInput.name = theSelect.dataset.valueField;

        let textInput = createElement('input');
        textInput.setAttribute('type', 'hidden');
        textInput.id = theSelect.dataset.textField;
        textInput.name = theSelect.dataset.textField;

        let selectButtonInput = createElement('div');
        selectButtonInput.className = "select-button-input";
        selectButtonInput.setAttribute('contenteditable', theTrue);
        let clearSelectButton = createButton('x', clearSelect);
        clearSelectButton.className = "clear-select-button";
        selectButton.innerHTML = '';
        selectButton.appendChild(uidInput);
        selectButton.appendChild(textInput);
        selectButton.appendChild(selectButtonInput);
        selectButton.appendChild(clearSelectButton);
        theSelect.appendChild(selectButton);
        if (json == undefined && theSelect.dataset.value === '') {
            selectButton.classList.add('disabled');
            return;
        }

        if (hasClass(selectButton, 'disabled')) {
            selectButton.classList.remove('disabled');
        }

        if (theSelect.dataset.value !== ''
            && theSelect.dataset.text !== '') {
            selectButtonInput.innerHTML = theSelect.dataset.text;
            uidInput.value = theSelect.dataset.value;
            textInput.value = theSelect.dataset.text;
        } else {
            if (theSelect.dataset.setFirstItem === theTrue) {
                if (json.length > 0) {
                    selectButtonInput.innerHTML = json[0].text;
                    uidInput.value = json[0].value;
                    textInput.value = json[0].text;
                    theSelect.dataset.value = json[0].value;
                    theSelect.dataset.text = json[0].text;
                    theSelect.dispatchEvent(theSelectChangeEvent);

                    reFillChildsData(json[0].value, theSelect.dataset.valueField);
                }
            }
        }

        selectButton.onclick = function () { toggleSelectContent(this); };
        // show content when input
        selectButtonInput.onkeydown = function (e) {
            let theSelect = this.closest('.select');
            theSelect.classList.add('show');
            oldSearchTerm = this.innerHTML;
            // when click backspace with empty content
            if (e.keyCode == 13) {
                document.execCommand('insertHTML', false, '');
                // prevent the default behaviour of return key pressed
                return false;
            }
        }
        // filter text
        selectButtonInput.onkeyup = function (e) {
            e.preventDefault();
            searchSelectContent(this, e);
        }
    }

    function initSingleSelectInfo(parent, detailUrl) {
        // Create Info Btn
        let infoBtn = createElement('button');
        infoBtn.className = "select-item-info-btn";
        infoBtn.innerHTML = 'i';
        parent.querySelector('.select-button').appendChild(infoBtn);

        // Create Info Popup
        let infoWrapper = createElement('div');
        infoWrapper.className = "select-info-wrapper";
        let closePopover = createElement('button');
        closePopover.className = "close-popover-btn";
        closePopover.innerHTML = "x";
        infoWrapper.appendChild(closePopover);
        closePopover.onclick = function () { infoWrapper.classList.remove('show'); }
        let infoHeader = createElement('div');
        infoHeader.className = "select-info-header";
        let infoImg = createElement('img');
        infoImg.className = "select-info-img";
        let infoTitle = createElement('label');
        infoTitle.className = 'select-info-title';
        infoHeader.appendChild(infoImg);
        infoHeader.appendChild(infoTitle);
        let infoDesc = createElement('div');
        infoDesc.className = 'select-info-desc';
        infoWrapper.appendChild(infoHeader);
        infoWrapper.appendChild(infoDesc);
        parent.appendChild(infoWrapper);

        // Show popover when hover the info button
        infoBtn.onmouseover = function () {
            let text = parent.querySelector('.select-button-input').innerHTML.toLowerCase();
            if (text) {
                infoWrapper.classList.add('show');
                infoImg.setAttribute('src', 'url');
                infoTitle.innerHTML = 'select item text';
            }
        }
        // Show popup when click info button
        infoBtn.onclick = function (e) {
            e.preventDefault();
            e.stopPropagation();
            infoWrapper.classList.remove('show');

            //todo:get data from detailUrl

            let strHTML = '<div class="select-item-header">';
            strHTML += '<img class="select-item-image" src="' + 'Sample' + '">';
            strHTML += '<label class="select-item-text">' + 'sample text' + '</label>';
            strHTML += '</div>';
            showPopup("Detail", strHTML, true, function () { });
        }
    }

    function initSingleSelectContent(parent, json) {
        let selectContent = createElement('div');
        selectContent.className = "select-content";
        if (json != undefined) {
            for (let i = 0; i < json.length; i++) {
                let selectItem = initSelectItems(selectContent, json[i], parent.dataset.type, parent);
                if (selectItem != null) {
                    selectItem.onclick = function () { onClickSingleSelectItem(this); }
                }
            }
        }

        parent.appendChild(selectContent);

        selectContent.onscroll = function () { addSelectContent(this); }
    }

    function onClickSingleSelectItem(item) {
        let theSelect = item.closest('.select');

        var theValue = item.getAttribute('value');
        var theText = item.innerHTML;

        if (theSelect.dataset.type === 'content') {
            theText = item.querySelector('.select-item-text').innerHTML;
            theSelect.querySelector('.select-button-input').innerHTML = theText;
        } else {
            theSelect.querySelector('.select-button-input').innerHTML = theText;
        }

        getElement(theSelect.dataset.valueField).setAttribute('value', theValue);
        getElement(theSelect.dataset.textField).setAttribute('value', theText);
        theSelect.dataset.value = theValue;
        theSelect.dataset.text = theText;

        reFillChildsData(theValue, theSelect.dataset.valueField);

        theSelect.dispatchEvent(theSelectChangeEvent);
        theSelect.classList.remove('show');
    }

    function clearSelect(e) {
        e.preventDefault();
        e.stopPropagation();
        let theSelect = this.closest('.select');
        let selectButton = theSelect.querySelector('.select-button');
        let selectButtonInput = selectButton.querySelector('.select-button-input');
        selectButtonInput.innerHTML = '';
        theSelect.dataset.value = '';
        theSelect.dataset.text = '';
        getElement(theSelect.dataset.valueField).value = '';
        getElement(theSelect.dataset.textField).value = '';

        // Refills the data
        let parentId;
        let parentName = theSelect.dataset.valueField;
        allSelects.forEach(function (s) {
            if (s.dataset.valueField == theSelect.dataset.parent) {
                parentId = s.querySelector(theSelect.dataset.valueField).getAttribute('value');
            }
            // If parent cleared, clear child select also
            if (s.dataset.parent == parentName) {
                s.querySelector('.select-button').classList.add('disabled');
                s.querySelector('.select-button-input').innerHTML = ' ';
                s.querySelector('.select-content').innerHTML = ' ';
            }
        });

        let url = theSelect.dataset.url + '?q=' + '&take=' + loadCount;
        if (parentId != undefined) {
            url += '&parent=' + parentId;
        }

        if (!urlArray.includes(url)) {
            doGet(url, function (req) {
                let json = JSON.parse(req.responseText);
                updateSelectContent(theSelect, json);
            });
        }
    }

    // Multiple Select Functions
    function initMultipleSelect(parent, json) {
        initMultipleSelectButton(parent);
        initMultipleSelectContent(parent, json);
    }

    function initMultipleSelectButton(theSelect) {
        let selectButton = createElement('div');
        selectButton.className = "select-button";
        let selectButtonInput = createElement('div');
        selectButtonInput.className = "select-button-input";
        selectButtonInput.setAttribute('contenteditable', theTrue);
        selectButton.appendChild(selectButtonInput);

        let uidInput = createElement('input');
        uidInput.setAttribute('type', 'hidden');
        uidInput.id = theSelect.dataset.valueField;
        uidInput.name = theSelect.dataset.valueField;
        uidInput.value = theSelect.dataset.value;

        let textInput = createElement('input');
        textInput.setAttribute('type', 'hidden');
        textInput.id = theSelect.dataset.textField;
        textInput.name = theSelect.dataset.textField;
        textInput.value = theSelect.dataset.text;

        selectButton.appendChild(uidInput);
        selectButton.appendChild(textInput);
        theSelect.appendChild(selectButton);

        if (theSelect.dataset.value !== '') {
            let values = theSelect.dataset.value.split(theValueSeparator);
            let names = theSelect.dataset.text.split(theValueSeparator);
            names.forEach(function (theText, index) {
                let activeItem = createElement('div');
                activeItem.className = "active-item";
                activeItem.setAttribute('draggable', theTrue);
                activeItem.setAttribute('data-value', values[index]);
                let activeItemText = createElement('span');
                activeItemText.innerHTML = theText;
                activeItem.id = theSelect.dataset.valueField + '-' + activeItemText.innerHTML;

                let removeItem = createButton('x', removeMultipleItem);
                removeItem.className = "remove-active-item";
                activeItem.appendChild(activeItemText);
                activeItem.appendChild(removeItem);
                selectButton.insertBefore(activeItem, selectButtonInput);
            });
        }

        selectButton.onclick = function () {
            toggleSelectContent(this);
        };

        selectButtonInput.onkeydown = function (e) {
            let theSelect = this.closest('.select');
            theSelect.classList.add('show');
            oldSearchTerm = this.innerHTML;
            // when click backspace with empty content
            if (e.keyCode === 13) {
                document.execCommand('insertHTML', false, '');
                // prevent the default behaviour of return key pressed
                return false;
            }
            if (!this.innerHTML && e.keyCode == 8) {
                let prev = this.previousSibling;
                if (prev && prev.className == 'active-item') {
                    let itemText = prev.querySelector('span').innerHTML;
                    prev.remove();
                    let type = theSelect.dataset.type;
                    let selectItems = theSelect.querySelectorAll('.select-item');
                    for (let i = 0; i < selectItems.length; i++) {
                        if (hasClass(selectItems[i], 'active')) {
                            if (type === 'content'
                                && selectItems[i].querySelector('.select-item-text').innerHTML === itemText) {
                                selectItems[i].classList.remove('active');
                            } else if (selectItems[i].innerHTML === itemText) {
                                selectItems[i].classList.remove('active');
                            }
                        }
                    }
                }
            }
        }
        selectButtonInput.onkeyup = function (e) {
            e.preventDefault();
            searchSelectContent(this, e);
        }
    }

    function initMultipleSelectContent(parent, json) {
        // Select content
        let type = parent.dataset.type;
        let selectContent = createElement('div');
        selectContent.className = "select-content";
        for (let i = 0; i < json.length; i++) {
            let selectItem = initSelectItems(selectContent, json[i], type, parent);
            if (selectItem != null) {
                selectItem.onmouseover = function () {
                    let selectItems = selectContent.querySelectorAll('.select-item');
                    for (let j = 0; j < selectItems.length; j++) {
                        if (hasClass(selectItems[j], 'hover')) {
                            selectItems[j].classList.remove('hover');
                        }
                    }
                    this.classList.add('hover');
                }
                selectItem.onclick = function () { onClickMultipleSelectItem(this); }
            }
        }
        parent.appendChild(selectContent);

        selectContent.onscroll = function () { addSelectContent(selectContent); }
    }

    function onClickMultipleSelectItem(item) {
        item.classList.add('active');

        let theSelect = item.closest('.select');
        let parent = theSelect.querySelector('.select-button');
        let selectInput = parent.querySelector('.select-button-input');
        let activeItem = createElement('div');
        activeItem.className = "active-item";
        activeItem.setAttribute('draggable', theTrue);
        let activeItemText = createElement('span');
        if (theSelect.dataset.type === 'content') {
            activeItemText.innerHTML = item.querySelector('.select-item-text').innerHTML;
        } else {
            activeItemText.innerHTML = item.innerHTML;
        }
        activeItem.id = theSelect.dataset.valueField + '-' + activeItemText.innerHTML;

        let removeItem = createButton('x', removeMultipleItem);
        removeItem.className = "remove-active-item";
        activeItem.appendChild(activeItemText);
        activeItem.appendChild(removeItem);
        parent.insertBefore(activeItem, selectInput);

        let selectedItemValue = item.getAttribute('value');
        let selectedItemText = item.innerText;

        appendValueToSelect(theSelect, selectedItemValue, selectedItemText);
    }

    function appendValueToSelect(theSelect, selectedItemValue, selectedItemText) {
        let oldValue = getElement(theSelect.dataset.valueField).getAttribute('value');
        if (oldValue != null) {
            selectedItemValue = oldValue + theValueSeparator + selectedItemValue;
        }

        let oldText = getElement(theSelect.dataset.textField).getAttribute('value');
        if (oldText != null) {
            selectedItemText = oldText + theValueSeparator + selectedItemText;
        }

        getElement(theSelect.dataset.valueField).setAttribute('value', selectedItemValue);
        getElement(theSelect.dataset.textField).setAttribute('value', selectedItemText);
    }

    function removeMultipleItem(e) {
        e.preventDefault();
        e.stopPropagation();
        let theSelect = this.closest('.select');
        let activeItem = this.closest('.active-item');

        let itemText = activeItem.querySelector('span').innerHTML;
        let itemValue = activeItem.getAttribute('data-value');

        let texts = getElement(theSelect.dataset.textField).getAttribute('value');
        let values = getElement(theSelect.dataset.valueField).getAttribute('value');

        getElement(theSelect.dataset.valueField).setAttribute('value', values.replace(itemValue, ''));
        getElement(theSelect.dataset.textField).setAttribute('value', texts.replace(itemText, ''));

        activeItem.remove();
        let selectItems = theSelect.querySelectorAll('.select-item');
        for (let i = 0; i < selectItems.length; i++) {
            if (hasClass(selectItems[i], 'active')) {
                if (theSelect.dataset.type === 'content'
                    && selectItems[i].querySelector('.select-item-text').innerHTML === itemText) {
                    selectItems[i].classList.remove('active');
                } else if (selectItems[i].innerHTML === itemText) {
                    selectItems[i].classList.remove('active');
                }
            }
        }
    }

    function clearContent(theSelect) {
        let selectContent = theSelect.querySelector('.select-content');
        selectContent.innerHTML = '';
    }

    document.addEventListener('click',
        function (e) {
            let activeSelect = document.querySelector('.select.show');
            if (activeSelect && activeSelect.contains(e.target) === false) {
                activeSelect.classList.remove('show');
            }
            let activePopover = document.querySelector('.select-info-wrapper.show');
            if (activePopover && activePopover.contains(e.target) === false) {
                activePopover.classList.remove('show');
            }
        });

    document.addEventListener('keyup',
        function (e) {
            let activeSelect;
            for (let i = 0; i < allSelects.length; i++) {
                if (hasClass(allSelects[i], 'show')) {
                    activeSelect = allSelects[i];
                }
            }
            let activeSelectContent, activeSelectItems;
            let currentSelectItemId = -1;
            if (activeSelect) {
                activeSelectContent = activeSelect.querySelector('.select-content');
                activeSelectItems = activeSelectContent.querySelectorAll('.select-item');
                for (let i = 0; i < activeSelectItems.length; i++) {
                    if (hasClass(activeSelectItems[i], 'hover')) { currentSelectItemId = i; }
                }
                // Up arrow key
                if (e.keyCode == 38) {
                    e.preventDefault();
                    if (currentSelectItemId - 1 >= 0) {
                        activeSelectContent.scrollTop -= activeSelectItems[currentSelectItemId].offsetHeight;
                        activeSelectItems[currentSelectItemId].classList.remove('hover');
                        activeSelectItems[currentSelectItemId - 1].classList.add('hover');
                    }
                }
                // Down arrow key
                if (e.keyCode == 40) {
                    e.preventDefault();
                    if (currentSelectItemId + 1 < activeSelectItems.length) {
                        if (currentSelectItemId === -1) {
                            activeSelectItems[currentSelectItemId + 1].classList.add('hover');
                        } else {
                            activeSelectContent.scrollTop += activeSelectItems[currentSelectItemId].offsetHeight;
                            activeSelectItems[currentSelectItemId].classList.remove('hover');
                            activeSelectItems[currentSelectItemId + 1].classList.add('hover');
                        }
                    }
                }
                // Press enter key 
                if (e.keyCode === 13
                    && activeSelectItems[currentSelectItemId]
                    && hasClass(activeSelectItems[currentSelectItemId], 'active') === false
                    && isNotChanged === false) {
                    if (hasClass(activeSelect, 'single-select')) { onClickSingleSelectItem(activeSelectItems[currentSelectItemId]); }
                    else if (hasClass(activeSelect, 'multiple-select')) { onClickMultipleSelectItem(activeSelectItems[currentSelectItemId]); }
                }
            }
        },
        false);

    initSelects = function () {
        document.querySelectorAll('div.select').forEach(function (s) {
            refreshSelect(s, () => {
                s.dataset.is_init_done = 'true';
                s.dispatchEvent(theSelectInitEvent);
            });
        });
    };

    initSelects();
})();

let tables = document.querySelectorAll('table');
tables.forEach(function (t) {
    if (t.dataset.result != undefined) {
        fillTable(t.dataset.result, t);
    }
});

function fillTable(dataPath, table) {
    doGet(dataPath, function (res) {
        if (res == undefined
            || res.responseText == undefined
            || res.responseText.length < 1
            || res.status > 299
            || res.status < 199) {
            return;
        }

        let dataResult = JSON.parse(res.responseText);

        appendHeader(dataResult.headers, table);

        if (dataResult.data.length > 0) {

            appendRows(dataResult.data, table, dataPath);

            if (dataResult.data.length < dataResult.pagingInfo.totalItemCount) {
                appendPaginationPanel(dataResult.pagingInfo, table);
            }
        }

        translateElement(table);
    });
}

function appendHeader(headers, table) {
    if (table.firstChild) {
        if (table.firstChild.tagName == 'THEAD') {
            return;
        }
    }

    let tr = createElement('tr');

    if (table.dataset.selectable === "true") {

        let chk = createElement('input');
        chk.type = 'checkbox';
        chk.onchange = function (c) {
            var rows = table.lastChild.childNodes;
            rows.forEach(function (r) {
                r.firstChild.firstChild.checked = chk.checked;
            });
        }

        let th = createElement('th');
        th.className = "selectable";
        th.appendChild(chk);
        tr.appendChild(th);
    }

    headers.forEach(function (head) {
        let th = createElement('th');
        th.innerHTML = head.key;
        th.dataset.translation = head.key;
        tr.appendChild(th);
    });

    let thead = createElement('thead');
    thead.appendChild(tr);

    table.appendChild(thead);
}

function prepareRow(line, table) {
    let cols = line.split(',_,');
    let row = document.createElement('tr');

    row.dataset.uid = cols[0];

    if (table.dataset.selectable === "true") {

        let chk = createElement('input');
        chk.type = 'checkbox';

        let td = createElement('td');
        td.className = "selectable";

        td.appendChild(chk);
        row.appendChild(td);
    }

    for (let j = 1; j < (cols.length - 1); j++) {
        let col = cols[j];

        let column = document.createElement('td');
        let chk = createElement('input');
        chk.type = 'checkbox';
        chk.disabled = "disabled";
        if (col.toLowerCase() === 'true') {
            chk.checked = "checked";
            column.appendChild(chk);
        }
        else if (col.toLowerCase() === 'false') {
            column.appendChild(chk);
        }
        else {
            column.innerHTML = col;
        }
        row.appendChild(column);
    }

    return row;
}

function appendRows(items, table) {

    if (table.firstChild.nextElementSibling) {
        if (table.firstChild.nextElementSibling.tagName == 'TBODY') {
            table.firstChild.nextElementSibling.remove();
        }
    }

    let tbody = createElement('tbody');

    for (let i = 0; i < items.length; i++) {
        let row = prepareRow(items[i], table);
        tbody.appendChild(row);
    }

    table.appendChild(tbody);
}

function appendPaginationPanel(pagingInfo, table) {

    if (table.parentElement.lastElementChild.classList.contains('pagination')) {
        table.parentElement.lastElementChild.remove();
    }

    let parentDiv = createElement('div');
    parentDiv.classList = 'pagination';

    let dataPath = table.dataset.result;

    let prmLastUid = '&lastUid=' + pagingInfo.lastUid;
    let prmTake = '&take=' + pagingInfo.take;
    let skipToLast = pagingInfo.totalItemCount - (pagingInfo.totalItemCount % pagingInfo.take);
    if (skipToLast === pagingInfo.totalItemCount) {
        skipToLast = ((pagingInfo.totalItemCount / pagingInfo.take) - 1) * pagingInfo.take;
    }
    let pageCount = (skipToLast / pagingInfo.take) + 1;

    if (pagingInfo.isHavingPrevious) {

        appendGotoFirst(parentDiv, function () { updateTableRows(dataPath, table); });
        appendGotoPrevious(parentDiv, function () {
            updateTableRows(dataPath + '?skip=' + (pagingInfo.skip - pagingInfo.take) + prmTake + prmLastUid, table);
        });
    }

    if (pagingInfo.type === 'page_numbers') {
        appendCurrentPage(parentDiv, pagingInfo.currentPage);
    }

    if (pagingInfo.isHavingNext) {
        appendGotoNext(parentDiv, function () {
            updateTableRows(dataPath + '?skip=' + (pagingInfo.skip + pagingInfo.take) + prmTake + prmLastUid, table);
        });
    }

    if (pagingInfo.type === 'page_numbers' && pagingInfo.isHavingNext) {
        appendGotoLast(parentDiv, function () {
            updateTableRows(dataPath + '?skip=' + skipToLast + prmTake, table);
        });
    }

    appendGotoPage(parentDiv, function () {

        var pageInput = parentDiv.getElementsByTagName('input')[0];

        let page = pageInput.value;
        if (page < 1) {
            page = 1;
        }

        let skip = (page - 1) * pagingInfo.take;
        if (skipToLast <= skip) {
            skip = skipToLast;
        }

        updateTableRows(dataPath + '?skip=' + skip + prmTake + prmLastUid, table);
    });

    appendTotalItemCount(parentDiv, pagingInfo.totalItemCount);

    table.parentElement.appendChild(parentDiv);
}

function updateTableRows(dataPath, table) {
    doGet(dataPath, function (req) {
        let dataResult = JSON.parse(req.responseText);
        if (dataResult.pagingInfo.skip >= dataResult.pagingInfo.totalItemCount
            || dataResult.data.length === 0) {
            return;
        }

        clearChildren(table.lastChild);

        appendRows(dataResult.data, table, dataPath);

        table.parentElement.lastChild.remove();
        appendPaginationPanel(dataResult.pagingInfo, table);
    });
}

function appendGotoFirst(pagingElement, onClick) { pagingElement.appendChild(createButton('<<', onClick)); }
function appendGotoPrevious(pagingElement, onClick) { pagingElement.appendChild(createButton('<', onClick)); }
function appendGotoNext(pagingElement, onClick) { pagingElement.appendChild(createButton('>', onClick)); }
function appendGotoLast(pagingElement, onClick) { pagingElement.appendChild(createButton('>>', onClick)); }

function appendCurrentPage(pagingElement, pageNumber) {
    let span = createElement('span');
    span.innerHTML = pageNumber;
    pagingElement.appendChild(span);
}

function appendGotoPage(pagingElement, btnGoClick) {
    let inputPage = createElement('input');
    inputPage.onkeypress = function (e) {
        if (e.keyCode === 13) {
            e.preventDefault();

            btnGoClick();
        }
    }

    pagingElement.appendChild(inputPage);
    pagingElement.appendChild(createButton('go', btnGoClick));
}

function appendTotalItemCount(pagingElement, totalItemCount) {
    var span = createElement('span');
    span.innerHTML = totalItemCount + ' records';
    pagingElement.appendChild(span);
}

function handleSelectedRows(btn) {
    doIfConfirmed(btn,
        function () {
            let rows = btn.parentElement.querySelectorAll('table tbody tr');

            let ids = '';
            rows.forEach(function (r) {
                let firstColumn = r.firstChild;
                let chk = firstColumn.firstChild;

                if (chk.checked) {
                    ids += 'Uids=' + firstColumn.parentElement.dataset.uid + '&';
                }
            });

            if (ids.length < 1) {
                showPopupMessage('please_select_at_least_one_item');
                return;
            }

            doPostWithFormUrlEncodedContent(btn.dataset.url, ids,
                function (req) {

                    let response = JSON.parse(req.response);
                    if (response.isOk === true) {
                        rows.forEach(function (r) {
                            let firstColumn = r.firstChild;
                            let chk = firstColumn.firstChild;

                            if (chk.checked) {
                                r.remove();
                            }
                        });

                        hidePopup();
                    } else {
                        let messages = response.messages.join('<br/>');
                        showPopupMessage(messages);
                    }
                },
                function (req) {
                    let messages = JSON.parse(req.response).join('<br/>');
                    showPopupMessage(messages);
                });
        });
}

function handleRow(btn, urlEncodedData, url, onSuccess) {
    doIfConfirmed(btn,
        function () {
            doPostWithFormUrlEncodedContent(url, urlEncodedData, onSuccess,
                function (req) {
                    let messages = JSON.parse(req.response).join('<br/>');
                    showPopupMessage(messages);
                });
        });
}

function handleDeleteRow(btn, url) {
    let uid = btn.parentElement.parentElement.dataset.uid;
    handleRow(btn, 'id=' + uid, url,
        function (req) {
            let response = JSON.parse(req.response);
            if (response.isOk === true) {
                btn.parentElement.parentElement.remove();
                hidePopup();
            } else {
                let messages = response.messages.join('<br/>');
                showPopupMessage(messages);
            }
        });
}

function handlePostAndAppendRow(btn) {
    showPopup(btn.dataset.confirmTitle, btn.dataset.confirmContent, true, function () {
        doPostWithFormUrlEncodedContent(btn.dataset.url, btn.dataset.prm,
            function (req) {
                let response = JSON.parse(req.response);
                if (response.isOk === true) {
                    let table = btn.nextElementSibling;
                    let row = prepareRow(response.item, table);
                    table.lastChild.appendChild(row);

                    hidePopup();
                } else {
                    let messages = response.messages.join('<br/>');
                    showPopupMessage(messages);
                }
            },
            function (req) {
                if (req.status == 500) {
                    showPopupMessage('server_error');
                } else {
                    let messages = JSON.parse(req.response).messages.join('<br/>');
                    showPopupMessage(messages);
                }
            });
    });
}

function handleChangeActivationRow(btn, url) {
    let row = btn.parentElement.parentElement;
    let table = row.parentElement.parentElement;
    let thead = table.firstChild;

    let isActiveIndex = 0;
    for (var i = 0; i < thead.firstChild.childNodes.length; i++) {
        if (thead.firstChild.childNodes[i].dataset.translation === 'is_active') {
            break;
        }
        isActiveIndex++;
    }

    let uid = row.dataset.uid;
    handleRow(btn, 'id=' + uid, url,
        function (req) {
            let response = JSON.parse(req.response);
            if (response.isOk === true) {
                var children = row.children[isActiveIndex];
                let old = children.children[0].checked;
                let isTrue = old === true;
                children.children[0].checked = !isTrue;

                hidePopup();
            } else {
                let messages = JSON.parse(req.response).join('<br/>');
                showPopupMessage(messages);
            }
        });
}

function handleRestoreRow(btn, url, redirectUrl) {
    let row = btn.parentElement.parentElement;
    let table = row.parentElement.parentElement;
    let thead = table.firstChild;

    let revisionIndex = 0;
    for (var i = 0; i < thead.firstChild.childNodes.length; i++) {
        if (thead.firstChild.childNodes[i].dataset.translation === 'revision') {
            break;
        }
        revisionIndex++;
    }

    var theRevision = row.children[revisionIndex].innerText;

    let uid = btn.parentElement.parentElement.dataset.uid;
    handleRow(btn, 'id=' + uid + '&revision=' + theRevision, url,
        function (req) {
            let response = JSON.parse(req.response);
            if (response.isOk === true) {
                window.location.href = redirectUrl + "/" + uid;
            } else {
                let messages = response.messages.join('<br/>');
                showPopupMessage(messages);
            }
        });
}
let _index = -1;
let lastFilter = "";

function searchWork() {
    let searchResults = document.getElementById("searchResults");
    let txtSearch = document.getElementById("txtSearch");
    txtSearch.addEventListener("keydown", onUpDownKeyPress);
    let filter = txtSearch.value;

    if (filter !== lastFilter) {
        _index = -1;

        doGet('/Label/SearchData?search=' + filter, function (req) {
            if (199 < req.status && req.status < 300) {
                bindLabelSearchDropdown(req.responseText);
            }
        });
    }
    lastFilter = filter;

    if (filter == "") {
        hide(searchResults);
        txtSearch.removeEventListener("keydown", onUpDownKeyPress);
    } else {
        show(searchResults);
    }
}

function bindLabelSearchDropdown(responseText) {
    let searchResults = document.getElementById('searchResults');
    while (searchResults.childElementCount > 1) {
        searchResults.removeChild(searchResults.firstChild);
    }
    let results = JSON.parse(responseText);
    if (results == null) {
        return;
    }
    for (let i = 0; i < results.length; i++) {
        let result = results[i];
        let link = document.createElement('a');
        link.setAttribute('uid', result.uid);
        link.innerHTML = result.key;
        searchResults.insertBefore(link, searchResults.firstChild);
    }
}

function openLabelSearchListPage() {
    window.location.href = "/Label/SearchList?search=" + getLabelSearchTerm();
}

function openLabelDetailPage(uid) {
    window.location.href = "/Label/Detail/" + uid;
}

function getLabelSearchTerm() {
    return document.getElementById("txtSearch").value;
}

document.onclick = function (e) {
    let item = e.target;
    if (item.id !== "searchResults"
        || item.id !== "txtSearch") {
        let searchResults = document.getElementById("searchResults");
        hide(searchResults);
    }
}

function show(element) {
    if (element != undefined) {
        element.classList.add("show");
    }
}

function hide(element) {
    if (element != undefined) {
        element.classList.remove("show");
    }
}

let KEY = {
    UP: 38,
    DOWN: 40,
    ENTER: 13
}

function onUpDownKeyPress(event) {
    let searchResults = document.getElementById('searchResults');
    let results = searchResults.getElementsByTagName("a");
    let key = event.which || event.keyCode;

    if (key === KEY.DOWN
        && _index < results.length - 1) {
        event.preventDefault();
        _index++;
    } else if (key === KEY.UP
               && _index > 0) {
        event.preventDefault();
        _index--;
    }

    markSelected(results, _index);

    if (key === KEY.ENTER) {
        if (event.target.id === "txtSearch") {
            openLabelSearchListPage();
        }
        else if (_index === results.length - 1) {
            openLabelSearchListPage();
        } else {
            openLabelDetailPage(results[_index].getAttribute("uid"));
        }
    }
}

function markSelected(results, resultIndexToSelect) {
    if (results.length === 1) {
        return;
    }

    for (i = 0; i < results.length; i++) {
        result = results[i];
        if (i === resultIndexToSelect) {
            result.classList.add("list-item-selected");
        } else {
            result.classList.remove("list-item-selected");
        }
    }
}